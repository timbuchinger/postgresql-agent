# Cline Rules for PostgreSQL Agent

## Project Patterns

### Code Organization
1. Core components are in main.py
2. Memory bank documentation in memory-bank/
3. Database operations encapsulated in PostgresConnector class
4. Agent definitions grouped together
5. Task definitions follow agent definitions

### Naming Conventions
- Class names: PascalCase (e.g., PostgresConnector)
- Variables: snake_case (e.g., connection_string)
- Agent names: Descriptive of role (e.g., Database Analyst)
- Task names: Action-oriented (e.g., understand_schema)

### Implementation Patterns
1. Database Operations:
   - Always use connection management
   - Format results as JSON
   - Include error handling

2. Agent Configuration:
   - Define role, goal, and backstory
   - Specify required tools
   - Set verbose mode for debugging

3. Task Definition:
   - Clear description
   - Specific expected output
   - Context passing via lambda

## User Preferences

### Documentation
1. Memory Bank structure:
   - projectbrief.md: Core requirements and goals
   - productContext.md: Problem space and solution
   - systemPatterns.md: Architecture and patterns
   - techContext.md: Technical setup
   - activeContext.md: Current state
   - progress.md: Status tracking

### Code Style
1. Keep main.py focused on core functionality
2. Group related components together
3. Use clear, descriptive comments
4. Maintain consistent indentation

## Known Challenges

### Database Operations
1. Connection string contains sensitive information
2. Need to handle connection cleanup
3. Results must be JSON serializable

### Agent Coordination
1. Tasks must be sequential
2. Context passing between tasks
3. Error handling across agents

## Tool Usage Patterns

### Database Tools
1. execute_sql:
   - Returns JSON formatted results
   - Handles query errors
   - Manages connections

2. get_schema:
   - Lists all public tables
   - Shows column details
   - Orders by table name

### Agent Tools
1. Analyst uses schema tool
2. Query Builder uses SQL tool
3. Answer Formatter processes results

## Evolution Notes

### Initial Setup
1. Basic database connectivity
2. Core agent structure
3. Tool implementation
4. Task pipeline

### Planned Improvements
1. Security enhancements
2. Performance optimization
3. Testing implementation
4. Documentation expansion

## Critical Paths

### Database Operations
1. Connection management
2. Query execution
3. Schema inspection
4. Result formatting

### Agent Processing
1. Schema analysis
2. Query generation
3. Result interpretation
4. Answer formatting
